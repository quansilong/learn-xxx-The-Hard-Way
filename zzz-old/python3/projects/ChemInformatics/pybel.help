Help on module pybel:

NAME
    pybel - pybel - A Cinfony module for accessing Open Babel

DESCRIPTION
    Global variables:
      ob - the underlying SWIG bindings for Open Babel
      informats - a dictionary of supported input formats
      outformats - a dictionary of supported output formats
      descs - a list of supported descriptors
      fps - a list of supported fingerprint types
      forcefields - a list of supported forcefields

CLASSES
    builtins.object
        Atom
        Fingerprint
        Molecule
        MoleculeData
        Outputfile
        Residue
        Smarts
    
    class Atom(builtins.object)
     |  Atom(OBAtom)
     |  
     |  Represent a Pybel atom.
     |  
     |  Required parameter:
     |     OBAtom -- an Open Babel OBAtom
     |  
     |  Attributes:
     |     atomicmass, atomicnum, cidx, coords, coordidx, exactmass,
     |     formalcharge, heavyvalence, heterovalence, hyb, idx,
     |     implicitvalence, isotope, partialcharge, residue, spin, type,
     |     valence, vector.
     |  
     |  (refer to the Open Babel library documentation for more info).
     |  
     |  The original Open Babel atom can be accessed using the attribute:
     |     OBAtom
     |  
     |  Methods defined here:
     |  
     |  __init__(self, OBAtom)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  atomicmass
     |  
     |  atomicnum
     |  
     |  cidx
     |  
     |  coordidx
     |  
     |  coords
     |  
     |  exactmass
     |  
     |  formalcharge
     |  
     |  heavyvalence
     |  
     |  heterovalence
     |  
     |  hyb
     |  
     |  idx
     |  
     |  implicitvalence
     |  
     |  isotope
     |  
     |  partialcharge
     |  
     |  residue
     |  
     |  spin
     |  
     |  type
     |  
     |  valence
     |  
     |  vector
    
    class Fingerprint(builtins.object)
     |  Fingerprint(fingerprint)
     |  
     |  A Molecular Fingerprint.
     |  
     |  Required parameters:
     |     fingerprint -- a vector calculated by OBFingerprint.FindFingerprint()
     |  
     |  Attributes:
     |     fp -- the underlying fingerprint object
     |     bits -- a list of bits set in the Fingerprint
     |  
     |  Methods:
     |     The "|" operator can be used to calculate the Tanimoto coeff. For
     |     example, given two Fingerprints 'a', and 'b', the Tanimoto coefficient
     |     is given by:
     |        tanimoto = a | b
     |  
     |  Methods defined here:
     |  
     |  __init__(self, fingerprint)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __or__(self, other)
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  bits
    
    class Molecule(builtins.object)
     |  Molecule(OBMol)
     |  
     |  Represent a Pybel Molecule.
     |  
     |  Required parameter:
     |     OBMol -- an Open Babel OBMol or any type of cinfony Molecule
     |  
     |  Attributes:
     |     atoms, charge, conformers, data, dim, energy, exactmass, formula,
     |     molwt, spin, sssr, title, unitcell.
     |  (refer to the Open Babel library documentation for more info).
     |  
     |  Methods:
     |     addh(), calcfp(), calcdesc(), draw(), localopt(), make3D(),
     |     calccharges(), removeh(), write()
     |  
     |  The underlying Open Babel molecule can be accessed using the attribute:
     |     OBMol
     |  
     |  Methods defined here:
     |  
     |  __init__(self, OBMol)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |      Iterate over the Atoms of the Molecule.
     |      
     |      This allows constructions such as the following:
     |         for atom in mymol:
     |             print atom
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  addh(self)
     |      Add hydrogens.
     |  
     |  calccharges(self, model='mmff94')
     |      Estimates atomic partial charges in the molecule.
     |      
     |      Optional parameters:
     |         model -- default is "mmff94". See the charges variable for a list
     |                  of available charge models (in shell, `obabel -L charges`)
     |      
     |      This method populates the `partialcharge` attribute of each atom
     |      in the molecule in place.
     |  
     |  calcdesc(self, descnames=[])
     |      Calculate descriptor values.
     |      
     |      Optional parameter:
     |         descnames -- a list of names of descriptors
     |      
     |      If descnames is not specified, all available descriptors are
     |      calculated. See the descs variable for a list of available
     |      descriptors.
     |  
     |  calcfp(self, fptype='FP2')
     |      Calculate a molecular fingerprint.
     |      
     |      Optional parameters:
     |         fptype -- the fingerprint type (default is "FP2"). See the
     |                   fps variable for a list of of available fingerprint
     |                   types.
     |  
     |  convertdbonds(self)
     |      Convert Dative Bonds.
     |  
     |  draw(self, show=True, filename=None, update=False, usecoords=False)
     |      Create a 2D depiction of the molecule.
     |      
     |      Optional parameters:
     |        show -- display on screen (default is True)
     |        filename -- write to file (default is None)
     |        update -- update the coordinates of the atoms to those
     |                  determined by the structure diagram generator
     |                  (default is False)
     |        usecoords -- don't calculate 2D coordinates, just use
     |                     the current coordinates (default is False)
     |      
     |      Tkinter and Python Imaging Library are required for image display.
     |  
     |  localopt(self, forcefield='mmff94', steps=500)
     |      Locally optimize the coordinates.
     |      
     |      Optional parameters:
     |         forcefield -- default is "mmff94". See the forcefields variable
     |                       for a list of available forcefields.
     |         steps -- default is 500
     |      
     |      If the molecule does not have any coordinates, make3D() is
     |      called before the optimization. Note that the molecule needs
     |      to have explicit hydrogens. If not, call addh().
     |  
     |  make3D(self, forcefield='mmff94', steps=50)
     |      Generate 3D coordinates.
     |      
     |      Optional parameters:
     |         forcefield -- default is "mmff94". See the forcefields variable
     |                       for a list of available forcefields.
     |         steps -- default is 50
     |      
     |      Once coordinates are generated, hydrogens are added and a quick
     |      local optimization is carried out with 50 steps and the
     |      MMFF94 forcefield. Call localopt() if you want
     |      to improve the coordinates further.
     |  
     |  removeh(self)
     |      Remove hydrogens.
     |  
     |  write(self, format='smi', filename=None, overwrite=False, opt=None)
     |      Write the molecule to a file or return a string.
     |      
     |      Optional parameters:
     |         format -- see the informats variable for a list of available
     |                   output formats (default is "smi")
     |         filename -- default is None
     |         overwite -- if the output file already exists, should it
     |                     be overwritten? (default is False)
     |         opt -- a dictionary of format specific options
     |                For format options with no parameters, specify the
     |                value as None.
     |      
     |      If a filename is specified, the result is written to a file.
     |      Otherwise, a string is returned containing the result.
     |      
     |      To write multiple molecules to the same file you should use
     |      the Outputfile class.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  atoms
     |  
     |  charge
     |  
     |  clone
     |  
     |  conformers
     |  
     |  data
     |  
     |  dim
     |  
     |  energy
     |  
     |  exactmass
     |  
     |  formula
     |  
     |  molwt
     |  
     |  residues
     |  
     |  spin
     |  
     |  sssr
     |  
     |  title
     |  
     |  unitcell
    
    class MoleculeData(builtins.object)
     |  MoleculeData(obmol)
     |  
     |  Store molecule data in a dictionary-type object
     |  
     |  Required parameters:
     |    obmol -- an Open Babel OBMol
     |  
     |  Methods and accessor methods are like those of a dictionary except
     |  that the data is retrieved on-the-fly from the underlying OBMol.
     |  
     |  Example:
     |  >>> mol = readfile("sdf", 'head.sdf').next() # Python 2
     |  >>> # mol = next(readfile("sdf", 'head.sdf')) # Python 3
     |  >>> data = mol.data
     |  >>> print data
     |  {'Comment': 'CORINA 2.61 0041  25.10.2001', 'NSC': '1'}
     |  >>> print len(data), data.keys(), data.has_key("NSC")
     |  2 ['Comment', 'NSC'] True
     |  >>> print data['Comment']
     |  CORINA 2.61 0041  25.10.2001
     |  >>> data['Comment'] = 'This is a new comment'
     |  >>> for k,v in data.items():
     |  ...    print k, "-->", v
     |  Comment --> This is a new comment
     |  NSC --> 1
     |  >>> del data['NSC']
     |  >>> print len(data), data.keys(), data.has_key("NSC")
     |  1 ['Comment'] False
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, key)
     |  
     |  __delitem__(self, key)
     |  
     |  __getitem__(self, key)
     |  
     |  __init__(self, obmol)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  clear(self)
     |  
     |  has_key(self, key)
     |  
     |  items(self)
     |  
     |  iteritems(self)
     |  
     |  keys(self)
     |  
     |  update(self, dictionary)
     |  
     |  values(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Outputfile(builtins.object)
     |  Outputfile(format, filename, overwrite=False, opt=None)
     |  
     |  Represent a file to which *output* is to be sent.
     |  
     |  Although it's possible to write a single molecule to a file by
     |  calling the write() method of a molecule, if multiple molecules
     |  are to be written to the same file you should use the Outputfile
     |  class.
     |  
     |  Required parameters:
     |     format - see the outformats variable for a list of available
     |              output formats
     |     filename
     |  
     |  Optional parameters:
     |     overwrite -- if the output file already exists, should it
     |                 be overwritten? (default is False)
     |     opt -- a dictionary of format-specific options
     |            For format options with no parameters, specify the
     |            value as None.
     |  
     |  Methods:
     |     write(molecule)
     |     close()
     |  
     |  Methods defined here:
     |  
     |  __init__(self, format, filename, overwrite=False, opt=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  close(self)
     |      Close the Outputfile to further writing.
     |  
     |  write(self, molecule)
     |      Write a molecule to the output file.
     |      
     |      Required parameters:
     |         molecule
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Residue(builtins.object)
     |  Residue(OBResidue)
     |  
     |  Represent a Pybel residue.
     |  
     |  Required parameter:
     |     OBResidue -- an Open Babel OBResidue
     |  
     |  Attributes:
     |     atoms, idx, name.
     |  
     |  (refer to the Open Babel library documentation for more info).
     |  
     |  The original Open Babel atom can be accessed using the attribute:
     |     OBResidue
     |  
     |  Methods defined here:
     |  
     |  __init__(self, OBResidue)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |      Iterate over the Atoms of the Residue.
     |      
     |      This allows constructions such as the following:
     |         for atom in residue:
     |             print atom
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  atoms
     |  
     |  idx
     |  
     |  name
    
    class Smarts(builtins.object)
     |  Smarts(smartspattern)
     |  
     |  A Smarts Pattern Matcher
     |  
     |  Required parameters:
     |     smartspattern
     |  
     |  Methods:
     |     findall(molecule)
     |  
     |  Example:
     |  >>> mol = readstring("smi","CCN(CC)CC") # triethylamine
     |  >>> smarts = Smarts("[#6][#6]") # Matches an ethyl group
     |  >>> print smarts.findall(mol)
     |  [(1, 2), (4, 5), (6, 7)]
     |  
     |  The numbers returned are the indices (starting from 1) of the atoms
     |  that match the SMARTS pattern. In this case, there are three matches
     |  for each of the three ethyl groups in the molecule.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, smartspattern)
     |      Initialise with a SMARTS pattern.
     |  
     |  findall(self, molecule)
     |      Find all matches of the SMARTS pattern to a particular molecule.
     |      
     |      Required parameters:
     |         molecule
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    readfile(format, filename, opt=None)
        Iterate over the molecules in a file.
        
        Required parameters:
           format - see the informats variable for a list of available
                    input formats
           filename
        
        Optional parameters:
           opt    - a dictionary of format-specific options
                    For format options with no parameters, specify the
                    value as None.
        
        You can access the first molecule in a file using the next() method
        of the iterator (or the next() keyword in Python 3):
            mol = readfile("smi", "myfile.smi").next() # Python 2
            mol = next(readfile("smi", "myfile.smi"))  # Python 3
        
        You can make a list of the molecules in a file using:
            mols = list(readfile("smi", "myfile.smi"))
        
        You can iterate over the molecules in a file as shown in the
        following code snippet:
        >>> atomtotal = 0
        >>> for mol in readfile("sdf", "head.sdf"):
        ...     atomtotal += len(mol.atoms)
        ...
        >>> print atomtotal
        43
    
    readstring(format, string, opt=None)
        Read in a molecule from a string.
        
        Required parameters:
           format - see the informats variable for a list of available
                    input formats
           string
        
        Optional parameters:
           opt    - a dictionary of format-specific options
                    For format options with no parameters, specify the
                    value as None.
        
        Example:
        >>> input = "C1=CC=CS1"
        >>> mymol = readstring("smi", input)
        >>> len(mymol.atoms)
        5

DATA
    charges = ['eem', 'eem2015ba', 'eem2015bm', 'eem2015bn', 'eem2015ha', ...
    descs = ['abonds', 'atoms', 'bonds', 'cansmi', 'cansmiNS', 'dbonds', '...
    forcefields = ['gaff', 'ghemical', 'mmff94', 'mmff94s', 'uff']
    fps = ['ecfp0', 'ecfp10', 'ecfp2', 'ecfp4', 'ecfp6', 'ecfp8', 'fp2', '...
    informats = {'CONFIG': 'DL-POLY CONFIG', 'CONTCAR': 'VASP format', 'CO...
    ipython_3d = False
    operations = ['0xout', 'addfilename', 'AddInIndex', 'AddNonPolarH', 'A...
    outformats = {'CONFIG': 'DL-POLY CONFIG', 'CONTCAR': 'VASP format', 'C...
    tk = None

FILE
    c:\anaconda3\lib\pybel.py
